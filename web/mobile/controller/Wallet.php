<?php
/**
 * Created by PhpStorm.
 * User: SUN
 * Date: 2018/8/24
 * Time: 11:40
 */

namespace web\mobile\controller;


use function Sodium\crypto_aead_aes256gcm_is_available;
use think\Request;
use think\Validate;

class Wallet extends Base
{
    private $userM;
    private $payConfM;
    private $balanceM;
    private $USDT = 1;
    private $ETD = 13;
    private $RMB = 2;
    private $privateRuleM;
    private $ethOrderM;
    private $recordM;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->userM = new \addons\member\model\MemberAccountModel();
        $this->payConfM = new \addons\otc\model\PayConfig();
        $this->balanceM = new \addons\member\model\Balance();
        $this->privateRuleM = new \addons\equity\model\PrivatePlacementRule();
        $this->ethOrderM = new \addons\eth\model\EthTradingOrder();
        $this->recordM = new \addons\member\model\TradingRecord();
    }

    public function index()
    {
        $balanceUSDT = $this->balanceM->where(['user_id' => $this->user_id, 'coin_id' => $this->USDT])->find();
        $balanceETD = $this->balanceM->where(['user_id' => $this->user_id, 'coin_id' => $this->ETD])->find();

        $usdt = empty($balanceUSDT['amount']) ? 0 : bcmul($balanceUSDT['amount'],1,4);
        $frost_etd = empty($balanceETD['amount']) ? 0 : bcmul($balanceETD['buy_amount'],1,4);
        $etd = empty($balanceETD['amount']) ? 0 : bcmul($balanceETD['amount'],1,4);
        $this->assign('usdt', $usdt);
        $this->assign('frost_etd', $frost_etd);
        $this->assign('etd',$etd);
        return $this->fetch();
    }

    public function toSetup()
    {
        return $this->fetch('setup');
    }

    public function toModifyLoginPsw()
    {
        return $this->fetch('modifyloginpsw');
    }

    public function toModifyDealPsw()
    {
        return $this->fetch('modifyDealPsw');
    }

    public function toModifyData()
    {
        $user = $this->userM->where('id',$this->user_id)->field('phone')->find();
        $pay_data = $this->payConfM->where('user_id',$this->user_id)->select();

        $data = array(
            'phone' => $user['phone'],
            'wechat'    => '',
            'alipay'    => '',
            'bank_address'  => '',
            'bank_code' => '',
            'name'  => '',
        );
        foreach ($pay_data as $v)
        {
            switch ($v['type'])
            {
                case 1:
                    $data['wechat'] = $v['account'];
                    break;
                case 2:
                    $data['alipay'] = $v['account'];
                    break;
                case 3:
                    $data['bank_code'] = $v['account'];
                    $data['bank_address'] = $v['bank_address'];
                    $data['name'] = $v['name'];
                    break;
            }
        }

        $this->assign('data',$data);
        return $this->fetch('modifydata');
    }

    public function toInvite()
    {
        $user = $this->userM->getDetail($this->user_id);
        $this->assign('username',$user['username']);
        return $this->fetch('invite');
    }

    /**
     * 修改登录密码
     * @return array
     */
    public function modifyLoginPsw()
    {
        $param = Request::instance()->post();
        $validate = new Validate([
            'password|原密码'  => 'require',
            'new_password|新密码'  => 'require',
            'new_password_confirm'  => 'require|confirm',
        ],[
            'new_password_confirm.confirm'  => '新密码不一致'
        ]);
        if(!$validate->check($param))
            return $this->failData($validate->getError());

        $password = md5($param['password']);
        $new_password = md5($param['new_password']);

        $user = $this->userM->where('id',$this->user_id)->column('password');

        if($user[0] != $password)
            return $this->failData('原密码错误');

        $this->userM->save([
            'password'  => $new_password,
        ],['id' => $this->user_id]);

        return $this->successData();
    }

    /**
     * 修改交易密码
     * @return array
     */
    public function modifyDealPsw()
    {
        $param = Request::instance()->post();
        $validate = new Validate([
            'pay_password|原密码'  => 'require',
            'new_pay_password|新密码'  => 'require',
            'new_pay_password_confirm'  => 'require|confirm',
        ],[
            'new_pay_password_confirm.confirm'  => '新密码不一致'
        ]);
        if(!$validate->check($param))
            return $this->failData($validate->getError());

        $pay_password = md5($param['pay_password']);
        $new_pay_password = md5($param['new_pay_password']);

        $user = $this->userM->where('id',$this->user_id)->column('pay_password');

        if($user[0] != $pay_password)
            return $this->failData('原密码错误');

        $this->userM->save([
            'pay_password'  => $new_pay_password,
        ],['id' => $this->user_id]);

        return $this->successData();
    }

    /**
     * 修改资料
     */
    public function modifyData()
    {
        $param = Request::instance()->post();
        $validate = new Validate([
            'phone' => 'require',
            'alipay'    => 'require',
            'wechat'    => 'require',
            'bank_address'  => 'require',
            'bank_code' => 'require',
            'name'  => 'require',
            'auth_code' => 'require',
            'old_phone' => 'require',
        ]);
        if(!$validate->check($param))
            return $this->failData($validate->getError());

        $old_phone = $param['old_phone'];
        $phone  = $param['phone'];
        $alipay = $param['alipay'];
        $wechat = $param['wechat'];
        $bank_address   = $param['bank_address'];
        $bank_code  = $param['bank_code'];
        $name   = $param['name'];
        $auth_code  = $param['auth_code'];

        $verfyM = new \addons\member\model\VericodeModel();
        $_verify = $verfyM->VerifyCode($auth_code,$old_phone);
        if(empty($_verify))
            return $this->failData('验证码失效，请重新获取');

        $verfyM->startTrans();
        try
        {
            $user = $this->userM->where('id',$this->user_id)->find();
            $user['phone'] = $phone;
            $user['id'] = $this->user_id;
            $this->userM->save($user);

            $wechat_data= $this->payConfM->where(['type' => 1, 'user_id' => $this->user_id])->find();
            $wechat_data['account'] = $wechat;
            $wechat_data['user_id'] = $this->user_id;
            $wechat_data['type'] = 1;
            $wechat_data['update_time'] = NOW_DATETIME;
            $this->payConfM->save($wechat_data);

            $alipay_data = $this->payConfM->where(['user_id' => $this->user_id, 'type' => 2])->find();
            $alipay_data['account'] = $alipay;
            $alipay_data['user_id'] = $this->user_id;
            $alipay_data['type'] = 2;
            $alipay_data['update_time'] = NOW_DATETIME;
            $this->payConfM->save($alipay_data);

            $bank_data = $this->payConfM->where(['user_id' => $this->user_id, 'type' => 3])->find();
            $bank_data['bank_address'] = $bank_address;
            $bank_data['account'] = $bank_code;
            $bank_data['name'] = $name;
            $bank_data['user_id'] = $this->user_id;
            $bank_data['type'] = 3;
            $bank_data['update_time'] = NOW_DATETIME;
            $this->payConfM->save($alipay_data);
            $this->payConfM->save($bank_data);

            $verfyM->commit();
            return $this->successData();
        }catch (\Exception $e)
        {
            $verfyM->rollback();
            return $this->failData($e->getMessage());
        }

    }

    public function toWithdrawUSDT()
    {
        $balance = $this->balanceM->where(['user_id' => $this->user_id, 'coin_id' => $this->USDT])->find();

        $usdt_num = empty($balance['amount']) ? 0 : $balance['amount'];
        $this->assign('usdt_num',$usdt_num);
        return $this->fetch('withdrawUSDT');
    }

    public function withdrawUSDT()
    {
        $param = Request::instance()->post();
        $validate = new Validate([
            'address'   => 'require',
            'num'       => 'require',
            'pay_password'  => 'require',
        ]);

        if(!$validate->check($param))
            return $this->failData($validate->getError());

        $address = $param['address'];
        $num = $param['num'];
        $pay_password = md5($param['pay_password']);

        if($num < 3)
            return $this->failData('数量不能低于手续费');

        $balanceM = new \addons\member\model\Balance();
        $verify = $balanceM->verifyStock($this->user_id,$this->USDT,$num);
        if(!$verify)
            return $this->failData('USDT余额不足');

        $user = $this->userM->getDetail($this->user_id);
        if($user['pay_password'] != $pay_password)
            return $this->failData('密码错误');

        $balance = $balanceM->where(['user_id' => $this->user_id, 'coin_id' => $this->USDT])->find();

        $balanceM->startTrans();
        try
        {
            //余额更新
            $this->balanceM->updateBalance($this->user_id,$num,$this->USDT,false);
            //添加交易记录
            $recordM = new \addons\member\model\TradingRecord();
            $after_amount = $balance['amount'] - $num;
            $recordM->addRecord($this->user_id,$this->USDT,$num,$balance['amount'],$after_amount,3,0,'',$address);

            //添加USDT转账订单记录
            $usdtOrderM = new \addons\eth\model\EthTradingOrder();
            $data = array(
                'user_id'   => $this->user_id,
                'coin_id'   => $this->USDT,
//                'txhash'    => $this->getHash(),
                'from_address'  => $user['address'],
                'to_address'    => $address,
                'type'      => 0,
                'status'    => 0,
                'amount'    => $num,
                'tax'       => 3,
                'update_time'    => NOW_DATETIME,
            );
            $usdtOrderM->save($data);

            $balanceM->commit();
            return $this->successData();
        }catch (\Exception $e)
        {
            $balanceM->rollback();
            return $this->failData($e->getMessage());
        }
    }

    private function getHash()
    {
        $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()+-';
        $random = $chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)];
        $content = uniqid().$random;

        return sha1($content);
    }

    public function toWithdrawList()
    {
        return $this->fetch('withdrawList');
    }

    public function withdrawList()
    {
        $param = Request::instance()->post();
        $validate = new Validate([
            'coin_id'  => 'require',
        ]);

        if(!$validate->check($param))
            return $this->failData($validate->getError());

        $data = $this->ethOrderM->where(['user_id' => $this->user_id, 'coin_id' => $param['coin_id'],'type' => 0])->field('amount,type,status,update_time,to_address')->select();
        for($i = 0; $i < count($data); $i++)
        {
            switch ($data[$i]['status'])
            {
                case 0:
                    $data[$i]['status'] = '未审核';    break;
                case 1:
                    $data[$i]['status'] = '已完成';    break;
                case 4:
                    $data[$i]['status'] = '未通过';    break;
            }
        }

        return $this->successData($data);
    }

    public function toAddress()
    {
        $user = $this->userM->getDetail($this->user_id);
        $this->assign('address',$user['address']);
        return $this->fetch('address');
    }

    public function toWithdrawETD()
    {
        $balance = $this->balanceM->where(['user_id' => $this->user_id, 'coin_id' => $this->ETD])->find();

        $usdt_num = empty($balance['amount']) ? 0 : $balance['amount'];
        $this->assign('etd_num',$usdt_num);
        return $this->fetch('withdrawETD');
    }

    public function withdrawETD()
    {
        $param = Request::instance()->post();
        $validate = new Validate([
            'address'   => 'require',
            'num'       => 'require',
            'pay_password'  => 'require',
        ]);

        if(!$validate->check($param))
            return $this->failData($validate->getError());

        $address = $param['address'];
        $num = $param['num'];
        $pay_password = md5($param['pay_password']);

        $balanceM = new \addons\member\model\Balance();
        $verify = $balanceM->verifyStock($this->user_id,$this->ETD,$num);
        if(!$verify)
            return $this->failData('ETD余额不足');

        $user = $this->userM->getDetail($this->user_id);
        if($user['pay_password'] != $pay_password)
            return $this->failData('密码错误');

        $balance = $balanceM->where(['user_id' => $this->user_id, 'coin_id' => $this->ETD])->find();

        $balanceM->startTrans();
        try
        {
            //余额更新
            $this->balanceM->updateBalance($this->user_id,$num,$this->ETD,false);
            //添加交易记录
            $recordM = new \addons\member\model\TradingRecord();
            $after_amount = $balance['amount'] - $num;
            $recordM->addRecord($this->user_id,$this->ETD,$num,$balance['amount'],$after_amount,3,0,'',$address);

            //添加USDT转账订单记录
            $usdtOrderM = new \addons\eth\model\EthTradingOrder();
            $data = array(
                'user_id'   => $this->user_id,
                'coin_id'   => $this->ETD,
//                'txhash'    => $this->getHash(),
                'from_address'  => $user['address'],
                'to_address'    => $address,
                'type'      => 0,
                'status'    => 0,
                'amount'    => $num,
                'tax'       => 3,
                'update_time'    => NOW_DATETIME,
            );
            $usdtOrderM->save($data);

            $balanceM->commit();
            return $this->successData();
        }catch (\Exception $e)
        {
            $balanceM->rollback();
            return $this->failData($e->getMessage());
        }
    }

    public function toRecordList()
    {
        return $this->fetch('recordList');
    }

    public function recordList()
    {
        $coin_id = Request::instance()->post('coin_id');
        $where['coin_id'] = $coin_id;

        $data = $this->recordM->getRecordList($coin_id,$this->user_id);
//        $data = $this->recordM->where(['coin_id' => $coin_id])->where('user_id',$this->user_id)->whereor('to_user_id',$this->user_id)->order('update_time desc')->select();

        if(!empty($data))
        {
            for($i = 0; $i < count($data); $i++)
            {
                $data[$i]['money_name'] = 'ETD余额';
                switch ($data[$i]['type'])
                {
                    case 0: $data[$i]['type'] = '转账';   break;
                    case 2: $data[$i]['type'] = '外网转入'; break;
                    case 3: $data[$i]['type'] = '提现转出'; break;
                    case 4: $data[$i]['type'] = '购买理财'; break;
                    case 6: $data[$i]['type'] = '后台拨币'; break;
                    case 8: $data[$i]['type'] = '冻结释放'; break;
                    case 9: $data[$i]['type'] = '提现未通过'; break;
                    case 10: $data[$i]['type'] = '推荐奖励'; break;
                    case 11: $data[$i]['type'] = '理财收益'; break;
                    case 12: $data[$i]['type'] = '团队理财收益'; break;
                    case 13:
                    {
                        $data[$i]['type'] = '认购冻结';
                        $data[$i]['money_name'] = '冻结ETD余额';
                        break;
                    }
                    case 14: $data[$i]['type'] = '充值'; break;
                    case 15:
                    {
                        $data[$i]['type'] = '持币生息';
                        $data[$i]['money_name'] = '冻结ETD余额';
                        break;
                    }
                    case 16: $data[$i]['type'] = '提取理财本金'; break;
                    case 17: $data[$i]['type'] = '后台扣币'; break;
                }
            }
        }

        return $this->successData($data);
    }

    public function toPayUSDT()
    {
        return $this->fetch('payUSDT');
    }

    public function payUSDT()
    {
        $file = request()->file('image');
        $amount = request()->param('amount');

        if(empty($file) || empty($amount))
            return $this->fetch('payUSDT');

        $info = $file->move(ROOT_PATH . 'public' . DS . 'uploads/usdtbuy');
        if($info)
        {
            $savename = $info->getSaveName();

            $m = new \addons\member\model\MemberUsdtpay();
            $data = array(
                'image_url' => $savename,
                'user_id'   => $this->user_id,
                'amount'    => $amount,
                'status'    => 1,
                'create_time' => NOW_DATETIME,
                'update_time' => NOW_DATETIME,
            );
            $m->save($data);
            $this->redirect('/mobile/wallet/index');
        }else
        {
            return $this->failData($file->getError());
        }
    }

    public function toPayUSDTList()
    {
        return $this->fetch('payUSDTList');
    }

    public function payUSDTList()
    {
        $m = new \addons\member\model\MemberUsdtpay();
        $data = $m->field('amount,status,create_time')->where('user_id',$this->user_id)->select();

        if(empty($data))
            return $this->failData();

        foreach ($data as &$v)
        {
            switch ($v['status'])
            {
                case 1:
                    $v['status'] = '未审核';   break;
                case 2:
                    $v['status'] = '审核通过';  break;
                case 3:
                    $v['status'] = '审核不通过'; break;
            }
        }

        return $this->successData($data);
    }

}
















