<?php
/**
 * Created by PhpStorm.
 * User: SUN
 * Date: 2018/8/24
 * Time: 11:40
 */

namespace web\mobile\controller;


use think\Request;
use think\Validate;

class Wallet extends Base
{
    private $userM;
    private $payConfM;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->userM = new \addons\member\model\MemberAccountModel();
        $this->payConfM = new \addons\otc\model\PayConfig();
    }

    public function index()
    {
        return $this->fetch();
    }

    public function toSetup()
    {
        return $this->fetch('setup');
    }

    public function toModifyLoginPsw()
    {
        return $this->fetch('modifyloginpsw');
    }

    public function toModifyDealPsw()
    {
        return $this->fetch('modifyDealPsw');
    }

    public function toModifyData()
    {
        $user = $this->userM->where('id',$this->user_id)->field('phone')->find();
        $pay_data = $this->payConfM->where('user_id',$this->user_id)->select();

        $data = array(
            'phone' => $user['phone'],
            'wechat'    => '',
            'alipay'    => '',
            'bank_address'  => '',
            'bank_code' => '',
            'name'  => '',
        );
        foreach ($pay_data as $v)
        {
            switch ($v['type'])
            {
                case 1:
                    $data['wechat'] = $v['account'];
                    break;
                case 2:
                    $data['alipay'] = $v['account'];
                    break;
                case 3:
                    $data['bank_code'] = $v['account'];
                    $data['bank_address'] = $v['bank_address'];
                    $data['name'] = $v['name'];
                    break;
            }
        }

        $this->assign('data',$data);
        return $this->fetch('modifydata');
    }

    /**
     * 修改登录密码
     * @return array
     */
    public function modifyLoginPsw()
    {
        $param = Request::instance()->post();
        $validate = new Validate([
            'password|原密码'  => 'require',
            'new_password|新密码'  => 'require',
            'new_password_confirm'  => 'require|confirm',
        ],[
            'new_password_confirm.confirm'  => '新密码不一致'
        ]);
        if(!$validate->check($param))
            return $this->failData($validate->getError());

        $password = md5($param['password']);
        $new_password = md5($param['new_password']);

        $user = $this->userM->where('id',$this->user_id)->column('password');

        if($user[0] != $password)
            return $this->failData('原密码错误');

        $this->userM->save([
            'password'  => $new_password,
        ],['id' => $this->user_id]);

        return $this->successData();
    }

    /**
     * 修改交易密码
     * @return array
     */
    public function modifyDealPsw()
    {
        $param = Request::instance()->post();
        $validate = new Validate([
            'pay_password|原密码'  => 'require',
            'new_pay_password|新密码'  => 'require',
            'new_pay_password_confirm'  => 'require|confirm',
        ],[
            'new_pay_password_confirm.confirm'  => '新密码不一致'
        ]);
        if(!$validate->check($param))
            return $this->failData($validate->getError());

        $pay_password = md5($param['pay_password']);
        $new_pay_password = md5($param['new_pay_password']);

        $user = $this->userM->where('id',$this->user_id)->column('pay_password');

        if($user[0] != $pay_password)
            return $this->failData('原密码错误');

        $this->userM->save([
            'pay_password'  => $new_pay_password,
        ],['id' => $this->user_id]);

        return $this->successData();
    }

    /**
     * 修改资料
     */
    public function modifyData()
    {
        $param = Request::instance()->post();
        $validate = new Validate([
            'phone' => 'require',
            'alipay'    => 'require',
            'wechat'    => 'require',
            'bank_address'  => 'require',
            'bank_code' => 'require',
            'name'  => 'require',
            'auth_code' => 'require',
            'old_phone' => 'require',
        ]);
        if(!$validate->check($param))
            return $this->failData($validate->getError());

        $old_phone = $param['old_phone'];
        $phone  = $param['phone'];
        $alipay = $param['alipay'];
        $wechat = $param['wechat'];
        $bank_address   = $param['bank_address'];
        $bank_code  = $param['bank_code'];
        $name   = $param['name'];
        $auth_code  = $param['auth_code'];

        $verfyM = new \addons\member\model\VericodeModel();
        $_verify = $verfyM->VerifyCode($auth_code,$old_phone);
        if(empty($_verify))
            return $this->failData('验证码失效，请重新获取');

        $verfyM->startTrans();
        try
        {
            $this->userM->save([
                'phone' => $phone,
            ],['id' => $this->user_id]);

            $this->payConfM->save([
                'account' => $wechat,
            ],[
                'user_id'   => $this->user_id,
                'type'      => 1
            ]);

            $this->payConfM->save([
                'account'   => $alipay,
            ],[
                'user_id'   => $this->user_id,
                'type'      => 2
            ]);

            $this->payConfM->save([
                'bank_address'  => $bank_address,
                'account'   => $bank_code,
                'name'      => $name,
            ],[
                'user_id'   => $this->user_id,
                'type'  => 3
            ]);

            $verfyM->commit();
            return $this->successData();
        }catch (\Exception $e)
        {
            $verfyM->rollback();
            return $this->failData($e->getMessage());
        }

    }
}
















