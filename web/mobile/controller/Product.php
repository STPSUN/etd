<?php
/**
 * Created by PhpStorm.
 * User: SUN
 * Date: 2018/8/31
 * Time: 10:55
 */

namespace web\mobile\controller;


use think\Request;
use think\Validate;

class Product extends Base
{
    private $ETD_ID = 13;
    private $userM;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->userM = new \addons\member\model\MemberAccountModel();
    }

    public function index()
    {
        return $this->fetch();
    }

    public function getList()
    {
        $productM = new \addons\financing\model\Product();
        $list = $productM->getListByCoinID(13);

        for ($i = 0; $i < count($list); $i++)
        {
            $list[$i]['profit'] = bcdiv($list[$i]['rate'],$list[$i]['duration'],2);
        }

        return $this->successData($list);
    }

    public function toDetail()
    {
        return $this->fetch('detail');
    }

    public function detail()
    {
        $param = Request::instance()->post();
        $validate = new Validate([
            'product_id'    => 'require',
        ]);
        if(!$validate->check($param))
            return $this->failData($validate->getError());

        $product_id = $param['product_id'];
        $productM = new \addons\financing\model\Product();
        $data = $productM->getDetail($product_id);
        $data['profit'] = bcdiv($data['rate'],$data['duration'],2);

        return $this->successData($data);
    }

    /**
     * 购买理财
     */
    public function buyProduct()
    {
        $param = Request::instance()->post();
        $validate = new Validate([
            'product_id'    => 'require',
            'amount|数量'        => 'require|integer'
        ]);
        if(!$validate->check($param))
            return $this->failData($validate->getError());

        $product_id = $param['product_id'];
        $amount = $param['amount'];

        $userM = new \addons\member\model\MemberAccountModel();
//        $userAddr = $userM->getUserAddress($this->user_id);
//        if(empty($userAddr))
//            return $this->failData('用户钱包地址不存在');

        $balanceM = new \addons\member\model\Balance();
        $verify = $balanceM->verifyStock($this->user_id,$this->ETD_ID,$amount);
        if(!$verify)
            return $this->failData('ETD余额不足');

        $balance = $balanceM->getBalanceByCoinID($this->user_id,$this->ETD_ID);

        $productM = new \addons\financing\model\Product();
        $verify_product = $productM->verifyStock($product_id,$amount);
        if(!$verify_product)
            return $this->failData('可认购数量不足');

        $product = $productM->getDetail($product_id);
        if(empty($product))
            return $this->failData('所选组合出错，请重新选择');

        if($amount < $product['min'])
            return $this->failData('最低认购为' . $product['min']);

        $release_time = date('Y-m-d H:i:s',strtotime("+".$product['duration']." days"));

        $balanceM->startTrans();
        try
        {
            //更新余额
            $balanceM->updateBalance($this->user_id,$amount,$this->ETD_ID,false);

            //更新理财库存
            $productM->where('id',$product_id)->setDec('stock',$amount);

            //添加理财记录
            $data = array(
                'user_id'   => $this->user_id,
                'coin_id'   => $this->ETD_ID,
                'product_id'    => $product_id,
                'amount'    => $amount,
                'release_time'  => $release_time,
                'add_time'  => NOW_DATETIME,
            );
            $userProductM = new \web\api\model\UserProduct();
            $userProductM->save($data);

            //添加交易记录
            $recordM = new \addons\member\model\TradingRecord();
            $after_amount = $balance['amount'] - $amount;
            $recordM->addRecord($this->user_id,$this->ETD_ID,$amount,$balance['amount'],$after_amount,4,0,0);

            //推荐奖励
            $this->recommendAward($amount);

            $balanceM->commit();
            return $this->successData();
        }catch (\Exception $e)
        {
            $balanceM->rollback();
            return $this->failData($e->getMessage());
        }
    }

    /**
     * 推荐奖励
     */
    private function recommendAward($amount)
    {
        $user = $this->userM->getDetail($this->user_id);
        $pOne = $this->userM->getDetail($user['pid']);
        $pTwo = $this->userM->getDetail($pOne['pid']);
        $pThree = $this->userM->getDetail($pTwo['pid']);

        if(empty($pOne))
            return true;

        $recordM = new \addons\member\model\TradingRecord();

        $oneBuyNum = $recordM->where(['user_id' => $pOne['id'], 'type' => 4, 'change_type' => 0])->sum('amount');
        $twoBuyNum = $recordM->where(['user_id' => $pTwo['id'], 'type' => 4, 'change_type' => 0])->sum('amount');
        $threeBuyNum = $recordM->where(['user_id' => $pThree['id'], 'type' => 4, 'change_type' => 0])->sum('amount');

        $oneNum = bcmul($amount,0.05,8);
        $twoNum = bcmul($amount,0.03,8);
        $threeNum = bcmul($amount,0.02,8);

        $oneNum = ($oneBuyNum > $oneNum) ? $oneNum : $oneBuyNum;
        $twoNum = ($twoBuyNum > $twoNum) ? $twoNum : $twoBuyNum;
        $threeNum = ($threeBuyNum > $threeNum) ? $threeNum : $threeBuyNum;

        $recordM->startTrans();
        $balanceM = new \addons\member\model\Balance();
        try
        {
            //上一代奖励发放
            $oneBalance = $balanceM->getBalanceByCoinID($pOne['id'],$this->ETD_ID);
            //更新余额
            $balanceM->updateBalance($pOne['id'],$oneNum,$this->ETD_ID,true);
            //添加交易记录
            $oneAfter = $oneBalance['amount'] + $oneNum;
            $recordM->addRecord($pOne['id'],$this->ETD_ID,$oneNum,$oneBalance['amount'],$oneAfter,10,1);

            //上二代奖励发放
            if(empty($pTwo))
            {
                $recordM->commit();
                return true;
            }
            $twoBalance = $balanceM->getBalanceByCoinID($pTwo['id'],$this->ETD_ID);
            $balanceM->updateBalance($pTwo['id'],$twoNum,$this->ETD_ID,true);
            $twoAfter = $twoBalance['amount'] + $twoNum;
            $recordM->addRecord($pTwo['id'],$this->ETD_ID,$twoNum,$twoBalance['amount'],$twoAfter,10,1);

            //上三代奖励发放
            if(empty($pThree))
            {
                $recordM->commit();
                return true;
            }
            $threeBalance = $balanceM->getBalanceByCoinID($pThree['id'],$this->ETD_ID);
            $balanceM->updateBalance($pThree['id'],$threeNum,$this->ETD_ID,true);
            $threeAfter = $threeBalance['amount'] + $threeNum;
            $recordM->addRecord($pThree['id'],$this->ETD_ID,$threeNum,$threeBalance['amount'],$threeAfter,10,1);

            $recordM->commit();
            return true;
        }catch (\Exception $e)
        {
            $recordM->rollback();
            return $this->failData($e->getMessage());
        }

    }

    public function toUserProductList()
    {
        return $this->fetch('userProductList');
    }

    public function getUserProductList()
    {
        $m = new \web\api\model\UserProduct();
        $data = $m->getList($this->user_id);
        if(!empty($data))
        {
            for ($i = 0; $i < count($data); $i++)
            {
                $data[$i]['rate'] = bcdiv($data[$i]['rate'],$data[$i]['duration'],2);
            }
        }

        return $this->successData($data);
    }

    /**
     * 收益
     */
    public function income()
    {
        $userProductM = new \web\api\model\UserProduct();
        $productM = new \addons\financing\model\Product();
        $balanceM = new \addons\member\model\Balance();
        $recordM = new \addons\member\model\TradingRecord();
        $data = $userProductM->where('release_time', '>=', NOW_DATETIME)->select();
        foreach ($data as $v)
        {
            $product = $productM->getDetail($v['product_id']);
            if(empty($product))
                continue;
            $rate = bcdiv($product['rate'],$product['duration'],2);
            $rate = bcdiv($rate,100,6);

            $num = bcmul($v['amount'],$rate);
            $balanceM->startTrans();
            $balance = $balanceM->getBalanceByCoinID($v['user_id'],$this->ETD_ID);
            try
            {
                //更新余额
                $balanceM->updateBalance($v['user_id'],$num,$this->ETD_ID,true);
                //添加交易记录
                $after_amount = $balance['amount'] + $num;
                $recordM->addRecord($v['user_id'],$this->ETD_ID,$num,$balance['amount'],$after_amount,11,1);

                $balanceM->commit();
            }catch (\Exception $e)
            {
                $balanceM->rollback();
                return $this->failData($e->getMessage());
            }
        }

    }
}




















